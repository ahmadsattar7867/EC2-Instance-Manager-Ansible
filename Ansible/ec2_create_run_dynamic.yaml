---
# - hosts: localhost
#   connection: local
#   vars:
#     num_instances_needed: 0
#     inventory_file: "ec2_inventory.ini"
#   tasks:
#     - name: Fetch existing EC2 instances with specific name pattern
#       amazon.aws.ec2_instance_info:
#         region: us-east-1
#         filters:
#           "tag:environment": "manage-node-*"
#       register: ec2_instances_info

#     - name: Extract instance numbers
#       set_fact:
#         instance_numbers: >-
#           {{
#             ec2_instances_info.instances
#             | map(attribute='tags.environment', default='')
#             | map('regex_replace', '^manage-node-(\d+)$', '\1')
#             | select('match', '^\d+$')
#             | map('int')
#             | list
#           }}

#     - name: Find the highest existing instance number
#       set_fact:
#         max_instance_number: "{{ (instance_numbers | max | default(0)) }}"

#     - name: Generate names for new instances
#       set_fact:
#         new_instance_names: >-
#           {{
#             range(max_instance_number | int + 1, max_instance_number | int + 1 + num_instances_needed)
#             | map('string')
#             | map('regex_replace', '^(.*)$', 'manage-node-\1')
#             | list
#           }}

#     - name: Create new EC2 instances
#       amazon.aws.ec2_instance:
#         name: "{{ item }}"
#         key_name: "ahmad-aws-keypair"
#         instance_type: t2.micro
#         security_group: default
#         region: us-east-1
#         aws_access_key: "{{ ec2_access_key }}"
#         aws_secret_key: "{{ ec2_secret_key }}"
#         network:
#           assign_public_ip: true
#         image_id: "ami-0e2c8caa4b6378d8c"
#         tags:
#           environment: "{{ item }}"
#         state: present
#       loop: "{{ new_instance_names }}"
#       register: new_instances

#     - name: Start EC2 instances
#       amazon.aws.ec2_instance:
#         region: "us-east-1"
#         instance_ids: "{{ ec2_instances_info.instances | map(attribute='instance_id') | list }}"
#         state: running
#       when: ec2_instances_info.instances | length > 0
#       register: started_instances

#     - name: Refresh instance info after starting
#       amazon.aws.ec2_instance_info:
#         region: us-east-1
#         filters:
#           "tag:environment": "manage-node-*"
#       register: all_instances_info

#     - name: Create inventory file
#       copy:
#         content: |
#           [ubuntu]
#           {% for instance in all_instances_info.instances %}
#           ubuntu@{{ instance.public_ip_address }}
#           {% endfor %}
#         dest: "{{ inventory_file }}"

#     - name: Display inventory file content
#       debug:
#         msg: "{{ lookup('file', inventory_file) }}"

- hosts: ubuntu
  become: true
  tasks:
    - name: Install apache httpd
      ansible.builtin.apt:
        name: apache2
        state: present
        update_cache: yes

    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: index.html
        dest: /var/www/html
        owner: root
        group: root
        mode: '0644'

- hosts: ubuntu
  become: true
  vars:
    docker_packages:
      - docker.io
      - docker-compose

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install Docker and dependencies
      apt:
        name: "{{ docker_packages }}"
        state: present

    - name: Ensure Docker service is running and enabled
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add current user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Reset connection to apply group changes
      meta: reset_connection

